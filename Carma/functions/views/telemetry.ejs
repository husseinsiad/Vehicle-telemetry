<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">

  <title>Carma Telemetry</title>

  <!-- Custom fonts for this template-->
  <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">

  <!-- Page level plugin CSS-->
  <link href="vendor/datatables/dataTables.bootstrap4.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

  <!-- <link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.0-wip/css/bootstrap.min.css" rel="stylesheet"> -->
  <!-- Firebase App (the core Firebase SDK) is always required and must be listed first -->
  <script src="https://www.gstatic.com/firebasejs/7.9.1/firebase-app.js"></script>

  <!-- If you enabled Analytics in your project, add the Firebase SDK for Analytics -->
  <script src="https://www.gstatic.com/firebasejs/7.9.1/firebase-analytics.js"></script>

  <!-- Add Firebase products that you want to use -->
  
  <script src="https://www.gstatic.com/firebasejs/7.9.1/firebase-auth.js"></script>
  <script src="https://www.gstatic.com/firebasejs/7.9.1/firebase-database.js"></script>
  <script src="https://www.gstatic.com/firebasejs/7.9.1/firebase-firestore.js"></script>
  <!-- Custom styles for this template-->
  <link href="css/sb-admin.css" rel="stylesheet">
  <link rel="stylesheet" href="css/telemetry.css">
  <!-- <script src="static/telemetry.js"></script> -->
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>

  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCR4r5RijTcXQxxMoGvMy6KIIaJrjRkJ2I"></script>
 
 

</head>

<body id="page-top" onload="drawVehicleSpeed(vehiclespeedcanvas,0,0); drawRPM(RPMcanvas,0,0); ">



  <!-- <body onload="drawVehicleSpeed(vehiclespeedcanvas,0,0); drawRPM(RPMcanvas,0,0); "></body> -->

  <nav class="navbar navbar-expand navbar-dark bg-dark static-top">

    <a class="navbar-brand mr-1" href="index">Carma Telemetry</a>

    <button class="btn btn-link btn-sm text-white order-1 order-sm-0" id="sidebarToggle" href="#">
      <i class="fas fa-bars"></i>
    </button>

    <!-- Navbar -->
    <ul class="navbar-nav ml-auto mr-md-0">
      <!-- <li class="nav-item dropdown no-arrow mx-1">
        <a class="nav-link dropdown-toggle" href="#" id="alertsDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <i class="fas fa-bell fa-fw"></i>
          <span class="badge badge-danger">9+</span>
        </a>
        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="alertsDropdown">
          <!-- <a class="dropdown-item" href="#">Action</a>
          <a class="dropdown-item" href="#">Another action</a>
          <div class="dropdown-divider"></div>
          <a class="dropdown-item" href="#">Something else here</a> -->
        </div>
      <!-- </li> -->
      <!-- <li class="nav-item dropdown no-arrow mx-1">
        <a class="nav-link dropdown-toggle" href="#" id="messagesDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <i class="fas fa-envelope fa-fw"></i>
          <span class="badge badge-danger">1</span>
        </a>
        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="messagesDropdown">
          <!-- <a class="dropdown-item" href="#">Action</a>
          <a class="dropdown-item" href="#">Another action</a>
          <div class="dropdown-divider"></div>
          <a class="dropdown-item" href="#">Something else here</a> -->
        </div>
      <!-- </li>  -->
      <li class="nav-item dropdown no-arrow">
        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <i class="fas fa-user-circle fa-fw"></i>
        </a>
        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="userDropdown">
          <!-- <a class="dropdown-item" href="#">Settings</a>
          <a class="dropdown-item" href="#">Activity Log</a> -->
          <!-- <div class="dropdown-divider"></div> -->
          <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">Logout</a>
        </div>
      </li>
    </ul>

  </nav>

  <div id="wrapper">

    <!-- Sidebar -->
    <ul class="sidebar navbar-nav">
      <li class="nav-item active">
        <a class="nav-link" href="index">
          <i class="fas fa-fw fa-tachometer-alt"></i>
          <span>Dashboard</span>

        </a>
      </li>
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="pagesDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <i class="fas fa-fw fa-folder"></i>
          <span>DTCs</span>
        </a>
        <div class="dropdown-menu" aria-labelledby="pagesDropdown">
          <h6 class="dropdown-header">Options:</h6>

          <a class="dropdown-item" href="carmd">Diagnose</a>
          <a class="dropdown-item" href="blank">Error Code</a>
        </div>
      </li>

      <li class="nav-item">
        <a class="nav-link" href="telemetry">
            <i class="far fa-life-ring"></i>
          <span>Live Telemetry</span></a>
      </li>

    </ul>

    <div id="content-wrapper">

      <div class="container-fluid">

        <!-- Breadcrumbs-->
        <ol class="breadcrumb">
          <li class="breadcrumb-item">
            <a href="#">Dashboard</a>
          </li>
          <li class="breadcrumb-item active">telemetry</li>
        </ol>

       
        <div class="card mb-3">
          <div class="card-header">
            <i class="far fa-life-ring"></i>
            Live Telmetry Data</div>
          <div class="card-body">
            <!-- MAP -->

 <div id="currentUser"> <%= currentUser %> </div>
            <div>
                
              <div class="row">
                <div class="col-md-6"
                     style="margin-top: 10px ;margin-bottom: 10px ;padding: 10px; min-width: 330px; box-shadow: 0 0 1px grey; float: left"
                     align="center">

                  <style>
                     .map {
                      height: 486px;

                    }
                    #map{
                      height: 486px;
                    }


                    @media (max-width: 1199px) {

                      .map {
                          height: 780px;
                      }

                      #map {
                          height: 780px;
                      }

                    }



                    @media (max-width: 991px) {

                      .map {
                          height: 845px;
                      }

                      #map {
                          height: 845px;
                      }

                    }
                    </style>

                    <div id="carouselExampleControls" class="carousel slide" data-ride="carousel" data-interval="false">
                        <div class="carousel-inner map">
                            <div class="carousel-item active map">
                                <div id="map" class="map1"></div>

                                /// JAVASCRIPT FILE
                                <script>

const firebaseConfig = {
    apiKey: 'AIzaSyC8ek2z-3xDI8rlaePQiOw-NDByJI8JqZ4',
    authDomain: 'se491-5f60f.firebaseapp.com',
    databaseURL: 'https://se491-5f60f.firebaseio.com',
    projectId: 'se491-5f60f',
    storageBucket: 'se491-5f60f.appspot.com',
    messagingSenderId: '541695700970',
    appId: '1:541695700970:web:1438c4a2ac47ea4fe4cc93',
    measurementId: 'G-08J4E1H1P2'
  };

  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);

    var db = firebase.database();
    //Get Current User
    $("#currentUser").hide();
    currentUser=$("#currentUser").text();
     
    var tripDateRef=db.ref('/Users/'+currentUser.trim()+'/TripData');
    var tripDateList=[];
    tripDateRef.on("value", function(snap) {
    snap.forEach(function(childNodes){
        tripDateList.push(childNodes.key);
        // console.log(childNodes.key)
    })

     var tripdate=tripDateList.pop();

    var latList=[];
    var lotList=[];
    var rpmList=[];
    var speedList=[];
    var fuelLevelList=[];
    var relativePosList=[];
    var lat=0;
    var lon=0;
    var tripRef=db.ref('/Users/'+currentUser.trim()+'/TripData/'+tripdate); 

    tripRef.on('value',function(snap){
      snap.forEach(function(childNodes){
        lat=childNodes.val().lat;
        lon=childNodes.val().lon;
        speed=childNodes.val().SPEED;
        rpm=childNodes.val().RPM;
        fuelLevel=childNodes.val().FUEL_LEVEL;
        relativePoss=childNodes.val().RELATIVE_THROTTLE_POS;

         latList.push(lat);
         lotList.push(lon);
         var i = rpm.indexOf(" ");  // Gets the first index where a space occours
         rpmList.push(Math.round(parseFloat(rpm.substr(0, i))|| 0)); // Gets the first part
         var speedIndex = speed.indexOf(" ");  // Gets the first index where a space occours
         speedList.push(Math.round(parseFloat(speed.substr(0, speedIndex)))); // Gets the first part
         var fuelIndex = speed.indexOf(" ");  // Gets the first index where a space occours
         fuelLevelList.push(Math.round(parseFloat(fuelLevel.substr(0, fuelIndex)))); // Gets the first part
         var relativeIndex = relativePoss.indexOf(" ");  // Gets the first index where a space occours
         relativePosList.push(Math.round(parseFloat(relativePoss.substr(0, relativeIndex)))); // Gets the first part

      })
      marker.setPosition( new google.maps.LatLng( latList.pop(), lotList.pop()))
      marker.setIcon(image)

      /// Update Speedometer
      var lastSpeed=speedList.pop();
      updateSpeedometer(lastSpeed * 0.6)
      updateSpeedometerText(lastSpeed * 0.6)
    //   var flevel=document.getElementById("#fuellLevelProgress");
        var fuelWidth=fuelLevelList.pop();
        var relativeWidth=relativePosList.pop();
       $("#fuellLevelProgress").text(fuelWidth+"%");
      document.querySelector("#fuellLevelProgress").style.width = fuelWidth + "%";
      $("#relativePossProgress").text(relativeWidth+"%");
      document.querySelector("#relativePossProgress").style.width = relativeWidth + "%";
    //   document.querySelector(".progress-bar").style.width = fuelLevelList.pop() + "%";
     //     /// Update RPM
     var lastRpm=rpmList.pop();
      updateRPM(lastRpm / 50)
      updateRPMText(lastRpm)
    });
});


 
var current_location = {lat: 44.95, lng: -93.37};
var current_orientation = 0
var ignore = false; // this var is global;

/*  var markerImage = 'markeImage.png' */
var image = {
    path: "M29.395,0H17.636c-3.117,0-5.643,3.467-5.643,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759 c3.116,0,5.644-2.527,5.644-5.644V6.584C35.037,3.467,32.511,0,29.395,0z M34.05,14.188v11.665l-2.729,0.351v-4.806L34.05,14.188z M32.618,10.773c-1.016,3.9-2.219,8.51-2.219,8.51H16.631l-2.222-8.51C14.41,10.773,23.293,7.755,32.618,10.773z M15.741,21.713 v4.492l-2.73-0.349V14.502L15.741,21.713z M13.011,37.938V27.579l2.73,0.343v8.196L13.011,37.938z M14.568,40.882l2.218-3.336 h13.771l2.219,3.336H14.568z M31.321,35.805v-7.872l2.729-0.355v10.048L31.321,35.805z",
    fillColor: '#F04231',
    fillOpacity: .8,
    anchor: new google.maps.Point(23.5,23.5),
    strokeWeight: 0,
    scale: 1.0,
    rotation: 0
}

var center_marker = new google.maps.Marker({position: {lat: 41.8781, lng: -86.623177}});

var centeringInterval

var vehicleOffline = false
var offlineCounter = 0

 

function centerMapOnVehicle() {
  var latLng = marker.getPosition(); // returns LatLng object
  ignore = true;
  map.setCenter(latLng); // setCenter takes a LatLng object
  map.setZoom(13)
}

function startCentering() {
  centerMapOnVehicle()
  centeringInterval = setInterval(centerMapOnVehicle, 100)
}

function stopCentering() {
  clearInterval(centeringInterval)
}

function updateSpeedometerText(value) {
  var telemetry = parseFloat(value).toFixed(0);
  document.getElementById("speedometerTele").innerHTML = `Speed ${telemetry} mph`;
}

function updateRPMText(value) {
  var telemetry = parseFloat(value).toFixed(0);
  document.getElementById("RPMTele").innerHTML = `RPM ${telemetry} rpm`;
}


function updateThrottleLabel(value) {
  //var telemetry = parseFloat(value).toFixed(0);
  document.getElementById("throttleLabel").innerHTML = value;//`Throttle ${telemetry}%`;
}

function updateBrakeLabel(value) {
  //var telemetry = parseFloat(value).toFixed(0);
  document.getElementById("brakeLabel").innerHTML = value;//`Brakes ${telemetry}%`;
}

function rotatespeed(value) {
var x = document.getElementById("pointertxt").value;
	document.getElementById('pointer').style.transform="rotate(" + - x + "deg)";
}

function updateBar(newGValue, barName, progressName) {
    //var x = document.getElementById(barName);
    var x = newGValue;
    x = parseFloat(x).toFixed(0);
   document.getElementById(progressName).style.width = x + '%';
   //document.getElementById(progressName).style.width = -x + '%';
}

function rotatewheel(newVal, steeringName, wheelName) {
    //console.log("steering name: " + steeringName);
    //var x = document.getElementById(steeringName);
    //x.value = newVal;
    //newVal = parseFloat(newVal).toFixed(2);
    document.getElementById(wheelName).style.transform="rotate(" + - newVal + "deg)";
}


function rotagage(value) {
var x = document.getElementById("sec_pointertxt").value;
	document.getElementById('sec_pointer').style.transform="rotate(" +  x + "deg)";
}

/*jslint plusplus: true, sloppy: true, indent: 4 */
(function () {
    "use strict";
    // this function is strict...
}());

var bDecrement = null,
    job = null;

function degToRad(angle) {
    // Degrees to radians
    return ((angle * Math.PI) / 180);
}

function radToDeg(angle) {
    // Radians to degree
    return ((angle * 180) / Math.PI);
}

function drawLine(options, line) {
    // Draw a line using the line object passed in
    options.ctx.beginPath();

    // Set attributes of open
    options.ctx.globalAlpha = line.alpha;
    options.ctx.lineWidth = line.lineWidth;
    options.ctx.fillStyle = line.fillStyle;
    options.ctx.strokeStyle = line.fillStyle;
    options.ctx.moveTo(line.from.X,
        line.from.Y);

    // Plot the line
    options.ctx.lineTo(
        line.to.X,
        line.to.Y
    );

    options.ctx.stroke();
}

function createLine(fromX, fromY, toX, toY, fillStyle, lineWidth, alpha) {
    // Create a line object using Javascript object notation
    return {
        from: {
            X: fromX,
            Y: fromY
        },
        to:    {
            X: toX,
            Y: toY
        },
        fillStyle: fillStyle,
        lineWidth: lineWidth,
        alpha: alpha
    };
}

function drawOuterMetallicArc(options) {
    /* Draw the metallic border of the speedometer
     * Outer grey area
     */
/*    options.ctx.beginPath();

    // Nice shade of grey
    options.ctx.fillStyle = "rgb(127,127,127)";

    // Draw the outer circle
    options.ctx.arc(options.center.X,
        options.center.Y,
        options.radius,
        0,
        Math.PI,
        true);

    // Fill the last object
    options.ctx.fill();
*/
}

function drawInnerMetallicArc(options) {
    /* Draw the metallic border of the speedometer
     * Inner white area
     */

    /*options.ctx.beginPath();

    // White
    options.ctx.fillStyle = "rgb(255,255,255)";

    // Outer circle (subtle edge in the grey)
    options.ctx.arc(options.center.X,
                    options.center.Y,
                    (options.radius / 100) * 90,
                    0,
                    Math.PI,
                    true);

    options.ctx.fill();

    */
}




function drawMetallicArc(options) {
    /* Draw the metallic border of the speedometer
     * by drawing two semi-circles, one over lapping
     * the other with a bot of alpha transparency
     */

    drawOuterMetallicArc(options);
    drawInnerMetallicArc(options);
}

function drawBackground(options) {
    /* Black background with alphs transparency to
     * blend the edges of the metallic edge and
     * black background
     */
   var i = 0;

    options.ctx.globalAlpha = 0.2;
    options.ctx.fillStyle = "rgb(0,0,0)";

    // Draw semi-transparent circles
    for (i = 170; i < 180; i++) {
        options.ctx.beginPath();

        options.ctx.arc(options.center.X,
            options.center.Y,
            i,
            0,
            Math.PI,
            true);

        options.ctx.fill();
    }

}

function applyDefaultContextSettings(options) {
    /* Helper function to revert to gauges
     * default settings
     */

    options.ctx.lineWidth = 2;
    options.ctx.globalAlpha = 0.5;
    options.ctx.strokeStyle = "rgb(255, 255, 255)";
    options.ctx.fillStyle = 'rgb(255,255,255)';
}

function drawSmallTickMarks(options) {
    /* The small tick marks against the coloured
     * arc drawn every 5 mph from 10 degrees to
     * 170 degrees.
     */

    var tickvalue = options.levelRadius - 8,
        iTick = 0,
        gaugeOptions = options.gaugeOptions,
        iTickRad = 0,
        onArchX,
        onArchY,
        innerTickX,
        innerTickY,
        fromX,
        fromY,
        line,
        toX,
        toY;

    applyDefaultContextSettings(options);

    // Tick every 20 degrees (small ticks)
    for (iTick = 10; iTick < 180; iTick += 20) {

        iTickRad = degToRad(iTick);

        /* Calculate the X and Y of both ends of the
         * line I need to draw at angle represented at Tick.
         * The aim is to draw the a line starting on the
         * coloured arc and continueing towards the outer edge
         * in the direction from the center of the gauge.
         */

        onArchX = gaugeOptions.radius - (Math.cos(iTickRad) * tickvalue);
        onArchY = gaugeOptions.radius - (Math.sin(iTickRad) * tickvalue);
        innerTickX = gaugeOptions.radius - (Math.cos(iTickRad) * gaugeOptions.radius);
        innerTickY = gaugeOptions.radius - (Math.sin(iTickRad) * gaugeOptions.radius);

        fromX = (options.center.X - gaugeOptions.radius) + onArchX;
        fromY = (gaugeOptions.center.Y - gaugeOptions.radius) + onArchY;
        toX = (options.center.X - gaugeOptions.radius) + innerTickX;
        toY = (gaugeOptions.center.Y - gaugeOptions.radius) + innerTickY;

        // Create a line expressed in JSON
        line = createLine(fromX, fromY, toX, toY, "rgb(127,127,127)", 3, 0.6);

        // Draw the line
        drawLine(options, line);

    }
}

function drawLargeTickMarks(options) {
    /* The large tick marks against the coloured
     * arc drawn every 10 mph from 10 degrees to
     * 170 degrees.
     */

    var tickvalue = options.levelRadius - 8,
        iTick = 0,
        gaugeOptions = options.gaugeOptions,
        iTickRad = 0,
        innerTickY,
        innerTickX,
        onArchX,
        onArchY,
        fromX,
        fromY,
        toX,
        toY,
        line;

    applyDefaultContextSettings(options);

    tickvalue = options.levelRadius - 2;

    // 10 units (major ticks)
    for (iTick = 20; iTick < 180; iTick += 20) {

        iTickRad = degToRad(iTick);

        /* Calculate the X and Y of both ends of the
         * line I need to draw at angle represented at Tick.
         * The aim is to draw the a line starting on the
         * coloured arc and continueing towards the outer edge
         * in the direction from the center of the gauge.
         */

        onArchX = gaugeOptions.radius - (Math.cos(iTickRad) * tickvalue);
        onArchY = gaugeOptions.radius - (Math.sin(iTickRad) * tickvalue);
        innerTickX = gaugeOptions.radius - (Math.cos(iTickRad) * gaugeOptions.radius);
        innerTickY = gaugeOptions.radius - (Math.sin(iTickRad) * gaugeOptions.radius);

        fromX = (options.center.X - gaugeOptions.radius) + onArchX;
        fromY = (gaugeOptions.center.Y - gaugeOptions.radius) + onArchY;
        toX = (options.center.X - gaugeOptions.radius) + innerTickX;
        toY = (gaugeOptions.center.Y - gaugeOptions.radius) + innerTickY;

        // Create a line expressed in JSON
        line = createLine(fromX, fromY, toX, toY, "rgb(127,127,127)", 3, 0.6);

        // Draw the line
        drawLine(options, line);
    }
}

function drawTicks(options) {
    /* Two tick in the coloured arc!
     * Small ticks every 5
     * Large ticks every 10
     */
    drawSmallTickMarks(options);
    drawLargeTickMarks(options);
}

function drawTicks1(options) {
    /* Two tick in the coloured arc!
     * Small ticks every 5
     * Large ticks every 10
     */
    drawSmallTickMarks(options);
    drawLargeTickMarks(options);
}

function drawTextMarkers(options) {
    /* The text labels marks above the coloured
     * arc drawn every 10 mph from 10 degrees to
     * 170 degrees.
     */
    var innerTickX = 0,
        innerTickY = 0,
        iTick = 0,
        gaugeOptions = options.gaugeOptions,
        iTickToPrint = 00;

    applyDefaultContextSettings(options);

    // Font styling
    options.ctx.font = 'italic 10px sans-serif';
    options.ctx.textBaseline = 'top';

    options.ctx.beginPath();

    // Tick every 20 (small ticks)
    for (iTick = 10; iTick < 180; iTick += 20) {

        innerTickX = gaugeOptions.radius - (Math.cos(degToRad(iTick)) * gaugeOptions.radius);
        innerTickY = gaugeOptions.radius - (Math.sin(degToRad(iTick)) * gaugeOptions.radius);

        // Some cludging to center the values (TODO: Improve)
        if (iTick <= 10) {
            options.ctx.fillText(iTickToPrint, (options.center.X - gaugeOptions.radius - 12) + innerTickX,
                    (gaugeOptions.center.Y - gaugeOptions.radius - 12) + innerTickY + 5);
        } else if (iTick < 50) {
            options.ctx.fillText(iTickToPrint, (options.center.X - gaugeOptions.radius - 12) + innerTickX - 5,
                    (gaugeOptions.center.Y - gaugeOptions.radius - 12) + innerTickY + 5);
        } else if (iTick < 90) {
            options.ctx.fillText(iTickToPrint, (options.center.X - gaugeOptions.radius - 12) + innerTickX,
                    (gaugeOptions.center.Y - gaugeOptions.radius - 12) + innerTickY);
        } else if (iTick === 90) {
            options.ctx.fillText(iTickToPrint, (options.center.X - gaugeOptions.radius - 12) + innerTickX + 4,
                    (gaugeOptions.center.Y - gaugeOptions.radius - 12) + innerTickY);
        } else if (iTick < 145) {
            options.ctx.fillText(iTickToPrint, (options.center.X - gaugeOptions.radius - 12) + innerTickX + 10,
                    (gaugeOptions.center.Y - gaugeOptions.radius - 12) + innerTickY);
        } else {
            options.ctx.fillText(iTickToPrint, (options.center.X - gaugeOptions.radius - 12) + innerTickX + 15,
                    (gaugeOptions.center.Y - gaugeOptions.radius - 12) + innerTickY + 5);
        }

        // MPH increase by 10 every 20 degrees
        //iTickToPrint += Math.round(2160 / 9);
         iTickToPrint += 10;
    }

    options.ctx.stroke();
}

function drawSpeedometerPart(options, alphaValue, strokeStyle, startPos) {
    /* Draw part of the arc that represents
    * the colour speedometer arc
    */

    options.ctx.beginPath();

    options.ctx.globalAlpha = alphaValue;
    options.ctx.lineWidth = 5;
    options.ctx.strokeStyle = strokeStyle;

    options.ctx.arc(options.center.X,
        options.center.Y,
        options.levelRadius,
        Math.PI + (Math.PI / 360 * startPos),
        0 - (Math.PI / 360 * 10),
        false);

    options.ctx.stroke();
}

function drawSpeedometerColourArc(options) {
    /* Draws the colour arc.  Three different colours
     * used here; thus, same arc drawn 3 times with
     * different colours.
     * TODO: Gradient possible?
     */

    var startOfGreen = 10,
        endOfGreen = 200,
        endOfOrange = 280;

    drawSpeedometerPart(options, 1.0, "rgb(204,254,255)", startOfGreen);
    drawSpeedometerPart(options, 0.9, "rgb(2,254,255)", endOfGreen);
    drawSpeedometerPart(options, 0.9, "rgb(1,127,127) ", endOfOrange);

}

function drawNeedleDial(options, alphaValue, strokeStyle, fillStyle) {
    /* Draws the metallic dial that covers the base of the
    * needle.
    */
    var i = 0;

    options.ctx.globalAlpha = alphaValue;
    options.ctx.lineWidth = 3;
    options.ctx.strokeStyle = strokeStyle;
    options.ctx.fillStyle = fillStyle;

    // Draw several transparent circles with alpha
    for (i = 0; i < 30; i++) {

        options.ctx.beginPath();
        options.ctx.arc(options.center.X,
            options.center.Y,
            i,
            0,
            Math.PI,
            true);

        options.ctx.fill();
        options.ctx.stroke();
    }
}

function convertSpeedToAngle(options) {
    /* Helper function to convert a speed to the
    * equivelant angle.
    */
    var iSpeed = (options.speed / 10),
        iSpeedAsAngle = ((iSpeed * 20) + 10) % 180;

    // Ensure the angle is within range
    if (iSpeedAsAngle > 180) {
        iSpeedAsAngle = iSpeedAsAngle - 180;
    } else if (iSpeedAsAngle < 0) {
        iSpeedAsAngle = iSpeedAsAngle + 180;
    }

    return iSpeedAsAngle;
}

function drawNeedle(options) {
    /* Draw the needle in a nice read colour at the
    * angle that represents the options.speed value.
    */

    var iSpeedAsAngle = convertSpeedToAngle(options),
        iSpeedAsAngleRad = degToRad(iSpeedAsAngle),
        gaugeOptions = options.gaugeOptions,
        innerTickX = gaugeOptions.radius - (Math.cos(iSpeedAsAngleRad) * 20),
        innerTickY = gaugeOptions.radius - (Math.sin(iSpeedAsAngleRad) * 20),
        fromX = (options.center.X - gaugeOptions.radius) + innerTickX,
        fromY = (gaugeOptions.center.Y - gaugeOptions.radius) + innerTickY,
        endNeedleX = gaugeOptions.radius - (Math.cos(iSpeedAsAngleRad) * gaugeOptions.radius),
        endNeedleY = gaugeOptions.radius - (Math.sin(iSpeedAsAngleRad) * gaugeOptions.radius),
        toX = (options.center.X - gaugeOptions.radius) + endNeedleX,
        toY = (gaugeOptions.center.Y - gaugeOptions.radius) + endNeedleY,
        line = createLine(fromX, fromY, toX, toY, "rgb(255, 255, 255)", 5, 0.6);

    drawLine(options, line);

    // Two circle to draw the dial at the base (give its a nice effect?)
    drawNeedleDial(options, 0.6, "rgb(127, 127, 127)", "rgb(255,255,255)");
    drawNeedleDial(options, 0.2, "rgb(127, 127, 127)", "rgb(127,127,127)");

}

function buildOptionsAsJSON(canvas, iSpeed) {
    /* Setting for the speedometer
    * Alter these to modify its look and feel
    */

    var centerX = 210,
        centerY = 210,
        radius = 150,
        outerRadius = 200;

    // Create a speedometer object using Javascript object notation
    return {
        ctx: canvas.getContext('2d'),
        speed: iSpeed,
        center:    {
            X: centerX,
            Y: centerY
        },
        levelRadius: radius - 10,
        gaugeOptions: {
            center:    {
                X: centerX,
                Y: centerY
            },
            radius: radius
        },
        radius: outerRadius
    };
}

function clearCanvas(options) {
    options.ctx.clearRect(0, 0, 800, 600);
    applyDefaultContextSettings(options);
}


///This is for Speed

function drawVehicleSpeed(iTargetSpeed) {
    /* Main entry point for drawing the speedometer
    * If canvas is not support alert the user.
    */

    var canvas = document.getElementById('vehiclespeedcanvas'),
       options = null;

    // Canvas good?
    if (canvas !== null && canvas.getContext) {
        options = buildOptionsAsJSON(canvas, iTargetSpeed);

        // Clear canvas
        clearCanvas(options);

        // Draw the metallic styled edge
        drawMetallicArc(options);

        // Draw thw background
        drawBackground(options);

        // Draw tick marks
        drawTicks(options);

        // Draw labels on markers
        drawTextMarkers(options);

        // Draw speeometer colour arc
        drawSpeedometerColourArc(options);

        // Draw the needle and base
        drawNeedle(options);

    } else {
        console.log("Canvas not supported by your browser!");
    }

}

///This is for RPM

function drawRPM(iTargetSpeed) {
    /* Main entry point for drawing the speedometer
    * If canvas is not support alert the user.
    */

    var canvas = document.getElementById('RPMcanvas'),
       options = null;

    // Canvas good?
    if (canvas !== null && canvas.getContext) {
        options = buildOptionsAsJSON(canvas, iTargetSpeed);

        // Clear canvas
        clearCanvas(options);

        // Draw the metallic styled edge
        drawMetallicArc(options);

        // Draw thw background
        drawBackground(options);

        // Draw tick marks
        drawTicks(options);

        // Draw labels on markers
        drawTextMarkers(options);

        // Draw speeometer colour arc
        drawSpeedometerColourArc(options);

        // Draw the needle and base
        drawNeedle(options);

    } else {
        console.log("Canvas not supported by your browser!");
    }

}


//speed
function updateSpeedometer(newValue) {


    if (newValue !== null) {

        let iTargetSpeed = parseFloat(newValue);

        // Sanity checks
        if (isNaN(iTargetSpeed)) {
            iTargetSpeed = 0;
        } else if (iTargetSpeed < 0) {
            iTargetSpeed = 0;
        } else if (iTargetSpeed > 80) {
            iTargetSpeed = 80;
        }
        drawVehicleSpeed(iTargetSpeed)

    }
}

//RPM

function updateRPM(newValue) {


    if (newValue !== null) {

        let iTargetSpeed = parseFloat(newValue);

        // Sanity checks
        if (isNaN(iTargetSpeed)) {
            iTargetSpeed = 0;
        } else if (iTargetSpeed < 0) {
            iTargetSpeed = 0;
        } else if (iTargetSpeed > 80) {
            iTargetSpeed = 80;
        }
        drawRPM(iTargetSpeed)

    }
}
                                </script> //END JAVASCRIPT FILE

                               <script>
                                 var map = new google.maps.Map(document.getElementById('map'), {
                                   zoom: 8,

                                   center: current_location
                                 });

                                 marker = new google.maps.Marker({position: current_location, map: map, icon: image});

                                 var controlDiv = document.createElement('div');

                                 var controlUI = document.createElement('div');
                                 controlUI.style.backgroundColor = '#fff';
                                 controlUI.style.border = '2px solid #fff';
                                 controlUI.style.borderRadius = '3px';
                                 controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
                                 controlUI.style.cursor = 'pointer';
                                 controlUI.style.marginBottom = '9px';
                                 controlUI.style.textAlign = 'center';
                                 controlUI.title = 'Click to recenter the map';
                                 controlDiv.appendChild(controlUI);

                                 var controlText = document.createElement('div');
                                 controlText.style.color = 'rgb(240,66,49)';
                                 controlText.style.fontFamily = 'didact gothic';
                                 controlText.style.fontSize = '16px';
                                 controlText.style.lineHeight = '38px';
                                 controlText.style.paddingLeft = '5px';
                                 controlText.style.paddingRight = '5px';
                                 controlText.innerHTML = 'Center Map';
                                 controlUI.appendChild(controlText);

                                 controlUI.addEventListener('click', function () {
                                   startCentering()
                                 });

                                 controlDiv.index = 1;
                                 map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlDiv);

                                    //controlDiv.style.paddingTop = '9px';

                                </script>
                            </div>
                            <div class="carousel-item" style="height:100%; ">
                              <!-- For object detection -->
                            </div>

                        </div>

                    </div>


                </div>

                <div class="col-md-1" style="padding: 0px; min-width: 0px; margin-left:0px;">

                <div class="row"
                         style="width:100%; min-width: 230px ; margin-left:10px; margin-right: 10px ;margin-top: 10px; box-shadow: 0 0 1px grey;"
                         align="center">



                            <div id='d2' style=" z-index:1;padding-top: 50px;padding-bottom: 50px; padding-right: 35px ;">
                                <canvas class="meter2" id="vehiclespeedcanvas" style=" width: 230px;height:100px;padding-left: 10%">Canvas not
                                    available.
                                </canvas>
                                <div id='dbar2' style=" margin-top: 10px; margin-left: 40px; " align="center">
                                    <label id="speedometerTele" style="font-size: 16px; font-family:'Didact gothic', Arial, Helvetica, sans-serif; ">
                                        Speed
                                        mph</label>

                                </div>
                                <script>
                                    var c = document.getElementById("vehiclespeedcanvas");
                                    var ctx = c.getContext("2d");
                                    //ctx.strokeRect(5, 5, 25, 15);
                                    ctx.scale(0.77, 0.77);
                                    ctx.width = 400;
                                    //ctx.strokeRect(5, 5, 25, 15);
                                </script>
                            </div>


                      </div>

        <!-- RPM Section -->

                         <div class="row"
                                  style="width:100%; min-width: 230px ; margin-left:10px; margin-right: 10px ;margin-top: 0px; ;box-shadow: 0 0 1px grey;"
                                  align="center">


                        <div id='d3' style=" z-index:1;padding-top: 50px;padding-bottom: 50px; padding-right: 35px ;">
                            <canvas class="meter3" id="RPMcanvas" style=" width: 230px;height:130px;padding-left: 10%">Canvas not
                                available.
                            </canvas>
                            <div id='dbar3' style=" margin-top: 10px; margin-left: 40px; " align="center">
                                <label id="RPMTele" style="font-size: 16px; font-family:'Didact gothic', Arial, Helvetica, sans-serif; ">
                                    RPM
                                    rpm</label>

                            </div>
                            <script>
                                var c = document.getElementById("RPMcanvas");
                                var ctx = c.getContext("2d");
                                //ctx.strokeRect(5, 5, 25, 15);
                                ctx.scale(0.77, 0.77);
                                ctx.width = 400;
                                //ctx.strokeRect(5, 5, 25, 15);
                            </script>
                        </div>

                    </div>
                  </div>

                    <div class="col-md-1" style="padding: 0px; min-width: 230px; margin-left:100px;">

                      <div class="row" style="padding: 50px">

                          <div class="col-md-12 box " style="padding-top: 0px; width: 100%; padding: 0px 30px; margin-left:50px" align="center">
                              <label id="throttleLabel"
                                     style="font-size: 16px; width:120px; font-family:'Didact gothic', Arial, Helvetica, sans-serif;padding-top: 15px ;margin-left: 10px;">Relative Throttle position
                                  %</label>
                                  <div class="progress" style="height: 20px;width: 170px;">
                                    <div id="relativePossProgress"class="progress-bar bg-info progress-bar-striped" role="progressbar" style="width: 0%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                    %
                                    </div>
                                  </div>
                          </div>
                        </div>


                      <div class="row" style="padding: 50px">

                          <div class="col-md-12 box " style="padding-top: 15px; padding: 0px 30px; margin-left:50px" align="center">
                              <label id="brakeLabel"
                                     style="font-size: 16px; width:100px; margin-left: 5px; font-family:'Didact gothic', Arial, Helvetica, sans-serif; padding-top: 45px;">Fuel Level
                                  %</label>
                                  <div class="progress" style="height: 20px; width: 170px;">
                                    <div id="fuellLevelProgress"class="progress-bar bg-info progress-bar-striped" role="progressbar" style="width: 0%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                    %
                                    </div>
                                  </div>
                              <!-- <div id="fuellLevelProgress" style=" width: 100%" align="left">
                                  <div id="brakeBar"></div>
                              </div> -->
                          </div>



                      </div>

                    </div>

                  </div>

              </div>
            </div>

          </div>
          <div class="card-footer small text-muted">Updated yesterday at 11:59 PM</div>
        </div>
      </div>
      <!-- /.container-fluid -->

      <!-- Sticky Footer -->
      <footer class="sticky-footer">
        <div class="container my-auto">
          <div class="copyright text-center my-auto">
            <span>Copyright © Carma Telemetry 2020</span>
          </div>
        </div>
      </footer>

    </div>
    <!-- /.content-wrapper -->

  </div>
  <!-- /#wrapper -->

  <!-- Scroll to Top Button-->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>

  <!-- Logout Modal-->
  <form action="/logout" method="GET">
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
            <button class="close" type="button" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">×</span>
            </button>
          </div>
          <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
          <div class="modal-footer">
            <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
            <button class="btn btn-primary">Logout</button>
          </div>
        </div>
      </div>
    </div>
  </form>

  <!-- Bootstrap core JavaScript-->
  
  <script src="vendor/jquery/jquery.min.js"></script>
  <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

  <!-- Core plugin JavaScript-->
  <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

  <!-- Page level plugin JavaScript-->
  <script src="vendor/chart.js/Chart.min.js"></script>

  <!-- Custom scripts for all pages-->
  <script src="js/sb-admin.min.js"></script>

  <!-- Demo scripts for this page-->
  <!-- <script src="js/demo/chart-area-demo.js"></script>
  <script src="js/demo/chart-bar-demo.js"></script>
  <script src="js/demo/chart-pie-demo.js"></script> -->
 
 
</body>

</html>
